//Author: Maciej Dowbor
//Last Accessed: 18/08/2021

#ifndef COMBATUNIT_H
#define COMBATUNIT_H

#include "Unit.h"
#include "MoveableObject.h"
#include "CombatHandlerSettings.h"
#include "CombatUnitSettings.h"
#include "TextBox.h"

//===========================================================================================
//Description: Combat Unit, used in combat handler 
//===========================================================================================
class CombatUnit : public virtual  Unit, public MoveableObject
{
private:
	bool m_isLargeUnit;
	bool m_isAttacker;
	bool m_didUnitSkipTurn;
	bool m_isUnitAI;
	int m_occupiedTileIndex;
	int m_vectorPositionIndex;
	TextBox m_numberOfUnitsTextBox;
public:

	//===========================================================================================
	//Description: Class constructor
	//===========================================================================================
	CombatUnit(sf::RenderWindow& rWindow, Textures& rTextures, Fonts& rFonts);

	//===========================================================================================
	//Description: Class destructor
	//===========================================================================================
	~CombatUnit();

	//===========================================================================================
	//Description: Set unit data from a unit
	//===========================================================================================
	void setUnit(Unit& unit);

	//===========================================================================================
	//Description: SEt unit data from base unit data
	//===========================================================================================
	void setUnit(UnitData& unitData);

	//===========================================================================================
	//Description: Update movement and text box position
	//===========================================================================================
	void update(const float& deltaTime);

	//===========================================================================================
	//Description: Set origin specific for defender
	//===========================================================================================
	void setDefenderSpriteOrigin();

	//===========================================================================================
	//Description: Set isAttacker bool
	//===========================================================================================
	void setIsAttacker(const bool state);

	//===========================================================================================
	//Description: Update text box position based on sprite position
	//===========================================================================================
	void updateTextBoxPosition();

	//===========================================================================================
	//Description: Return reference to the text box
	//===========================================================================================
	TextBox& getNumberOfUnitsTextBox();

	//===========================================================================================
	//Description: Return isAttacker bool
	//===========================================================================================
	const bool getIsAttacker() const;

	//===========================================================================================
	//Description: Return isLargeUnit bool
	//===========================================================================================
	const bool getIsLargeUnit() const;

	//===========================================================================================
	//Description: Set occupied tile index
	//===========================================================================================
	void setOccupiedTileIndex(const int tileIndex); //Parameter can't be a reference

	//===========================================================================================
	//Description: Return occupied tile index
	//===========================================================================================
	const int& getOccupiedTileIndex() const;

	//===========================================================================================
	//Description: Toggle if unit skiped its turn
	//===========================================================================================
	void toggleDidUnitSkipTurn();

	//===========================================================================================
	//Description: Return didUnitSpipTurn
	//===========================================================================================
	const bool getDidUnitSkipTurn() const;

	//===========================================================================================
	//Description: Sets vector position index
	//===========================================================================================
	void setVectorPositionIndex(const int& index);

	//===========================================================================================
	//Description: Returns vector position index
	//===========================================================================================
	const int& getVectorPositionIndex() const;

	//===========================================================================================
	//Description: Sets if unit is AI
	//===========================================================================================
	void setIsUnitAI(const bool state);

	//===========================================================================================
	//Description: Returns is unit AI
	//===========================================================================================
	const bool getIsUnitAI() const;
};

#endif // !COMBATUNIT_H
