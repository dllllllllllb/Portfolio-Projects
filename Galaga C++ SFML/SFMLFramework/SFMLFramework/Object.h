//Author: Maciej Dowbor
//Module: MED5149
//Date last accessed: 20/01/2021

#ifndef OBJECT_H
#define OBJECT_H

#include <SFML/Graphics/Texture.hpp>
#include <SFML/Graphics/Sprite.hpp>

#include "Helpers.h"

//=====================================================================================================	
//Class		: Object
//-----------------------------------------------------------------------------------------------------
//Purpose	: Class inherited by other objects in the game, provides basic functions that are needed in
//			  majority of classes
//=====================================================================================================
class Object : public sf::Sprite
{
private:
	float m_collisionOffSet;

protected:
	bool m_isActive;

public:

	Object( );
	//=================================================================================================						
	//Purpose	: Constructor
	//-------------------------------------------------------------------------------------------------
	//Parameters: -
	//-------------------------------------------------------------------------------------------------
	//Returns	: -
	//=================================================================================================

	~Object( );
	//=================================================================================================						
	//Purpose	: Destructor
	//-------------------------------------------------------------------------------------------------
	//Parameters: -
	//-------------------------------------------------------------------------------------------------
	//Returns	: -
	//=================================================================================================

	void load( const sf::Texture &texture );
	//=================================================================================================						
	//Purpose	: Sets objects texture, origin and object collision offset for collision detection
	//-------------------------------------------------------------------------------------------------
	//Parameters: Object texture
	//-------------------------------------------------------------------------------------------------
	//Returns	: -
	//=================================================================================================

	const bool getActiveState( ) const;
	//=================================================================================================						
	//Purpose	: Returns bool if the object is active
	//-------------------------------------------------------------------------------------------------
	//Parameters: -
	//-------------------------------------------------------------------------------------------------
	//Returns	: Bool if the object is active
	//=================================================================================================

	void toggleState( );
	//=================================================================================================						
	//Purpose	: Toggle active state from active to inactive and vice vera
	//-------------------------------------------------------------------------------------------------
	//Parameters: -
	//-------------------------------------------------------------------------------------------------
	//Returns	: -
	//=================================================================================================

	bool collisionCheck( const sf::Vector2f &otherObjectPosition );
	//=================================================================================================						
	//Purpose	: Checks collision between this object and position vector passed in
	//-------------------------------------------------------------------------------------------------
	//Parameters: Other object position as vector 2
	//-------------------------------------------------------------------------------------------------
	//Returns	: Bool if the collision happened or not
	//=================================================================================================
};

#endif // !OBJECT_H
