//Author: Maciej Dowbor
//Module: MED5149
//Date last accessed: 20/01/2021

#ifndef ENEMYDROPHANDLER
#define ENEMYDROPHANDLER

#include <SFML/Window/Window.hpp>

#include "EnemyDropTypeEnum.h"
#include "EnemyDrop.h"
#include "Settings.h"
#include "Textures.h"

//=====================================================================================================	
//Class		: EnemyDropHandler
//-----------------------------------------------------------------------------------------------------
//Purpose	: Manage enemy drops
//=====================================================================================================
class EnemyDropHandler
{
private:

	sf::RenderWindow &m_window;
	Textures *m_pTextures;

	int m_numOfActiveDrops;
	bool m_areDropsActive;

	EnemyDrop m_creditDrops	[k_numOfDrops];
	EnemyDrop m_healthDrops	[k_numOfDrops];
	EnemyDrop m_bombDrops	[k_numOfDrops];
	EnemyDrop m_shieldDrops	[k_numOfDrops];

	void initializeDrops( );
	//=================================================================================================						
	//Purpose	: Set up drops texture and type
	//-------------------------------------------------------------------------------------------------
	//Parameters: -
	//-------------------------------------------------------------------------------------------------
	//Returns	: -
	//=================================================================================================

public:

	EnemyDropHandler( sf::RenderWindow &window, Textures *textures );
	//=================================================================================================						
	//Purpose	: Constructor
	//-------------------------------------------------------------------------------------------------
	//Parameters: Reference to render window and pointer to textures
	//-------------------------------------------------------------------------------------------------
	//Returns	: -
	//=================================================================================================

	~EnemyDropHandler( );
	//=================================================================================================						
	//Purpose	: Destructor
	//-------------------------------------------------------------------------------------------------
	//Parameters: -
	//-------------------------------------------------------------------------------------------------
	//Returns	: -
	//=================================================================================================

	void update( const float &deltaTime );
	//=================================================================================================						
	//Purpose	: Updates drops
	//-------------------------------------------------------------------------------------------------
	//Parameters: Time passed since last frame
	//-------------------------------------------------------------------------------------------------
	//Returns	: -
	//=================================================================================================

	void spawnDrops( const sf::Vector2f &spawnPosition );
	//=================================================================================================						
	//Purpose	: Spawn drop at given position
	//-------------------------------------------------------------------------------------------------
	//Parameters: Spawn position as vector2
	//-------------------------------------------------------------------------------------------------
	//Returns	: -
	//=================================================================================================

	void drawDrops( );
	//=================================================================================================						
	//Purpose	: Draws drops
	//-------------------------------------------------------------------------------------------------
	//Parameters: -
	//-------------------------------------------------------------------------------------------------
	//Returns	: -
	//=================================================================================================

	void decreaseNumOfActiveDrops( );
	//=================================================================================================						
	//Purpose	: Decrements number of active drops used to check if drops are active
	//-------------------------------------------------------------------------------------------------
	//Parameters: -
	//-------------------------------------------------------------------------------------------------
	//Returns	: -
	//=================================================================================================

	const bool getAreDropsActive( ) const;
	//=================================================================================================						
	//Purpose	: Return bool if there are any active drops
	//-------------------------------------------------------------------------------------------------
	//Parameters: -
	//-------------------------------------------------------------------------------------------------
	//Returns	: Bool if drops are active
	//=================================================================================================

	EnemyDrop *getDrop( const EnemyDropType &dropType );
	//=================================================================================================						
	//Purpose	: Return pointer to a drop
	//-------------------------------------------------------------------------------------------------
	//Parameters: Drop type enum
	//-------------------------------------------------------------------------------------------------
	//Returns	: Pointer to a drop
	//=================================================================================================

	void reset( );
	//=================================================================================================						
	//Purpose	: Deactivates all drops and resets class values
	//-------------------------------------------------------------------------------------------------
	//Parameters: -
	//-------------------------------------------------------------------------------------------------
	//Returns	: -
	//=================================================================================================
};
#endif // !ENEMYDROPHANDLER
